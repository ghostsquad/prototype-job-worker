// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: pkg/api/job.proto

package prototype_job_worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobberClient is the client API for Jobber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobberClient interface {
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobGetResponse, error)
	Stop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobGetResponse, error)
	Get(ctx context.Context, in *JobGetRequest, opts ...grpc.CallOption) (*JobGetResponse, error)
	List(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error)
	Logs(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (Jobber_LogsClient, error)
}

type jobberClient struct {
	cc grpc.ClientConnInterface
}

func NewJobberClient(cc grpc.ClientConnInterface) JobberClient {
	return &jobberClient{cc}
}

func (c *jobberClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobGetResponse, error) {
	out := new(JobGetResponse)
	err := c.cc.Invoke(ctx, "/Jobber/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobberClient) Stop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobGetResponse, error) {
	out := new(JobGetResponse)
	err := c.cc.Invoke(ctx, "/Jobber/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobberClient) Get(ctx context.Context, in *JobGetRequest, opts ...grpc.CallOption) (*JobGetResponse, error) {
	out := new(JobGetResponse)
	err := c.cc.Invoke(ctx, "/Jobber/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobberClient) List(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, "/Jobber/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobberClient) Logs(ctx context.Context, in *JobLogsRequest, opts ...grpc.CallOption) (Jobber_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Jobber_ServiceDesc.Streams[0], "/Jobber/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobberLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jobber_LogsClient interface {
	Recv() (*JobLogsResponse, error)
	grpc.ClientStream
}

type jobberLogsClient struct {
	grpc.ClientStream
}

func (x *jobberLogsClient) Recv() (*JobLogsResponse, error) {
	m := new(JobLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobberServer is the server API for Jobber service.
// All implementations must embed UnimplementedJobberServer
// for forward compatibility
type JobberServer interface {
	Start(context.Context, *JobStartRequest) (*JobGetResponse, error)
	Stop(context.Context, *JobStopRequest) (*JobGetResponse, error)
	Get(context.Context, *JobGetRequest) (*JobGetResponse, error)
	List(context.Context, *JobListRequest) (*JobListResponse, error)
	Logs(*JobLogsRequest, Jobber_LogsServer) error
	mustEmbedUnimplementedJobberServer()
}

// UnimplementedJobberServer must be embedded to have forward compatible implementations.
type UnimplementedJobberServer struct {
}

func (UnimplementedJobberServer) Start(context.Context, *JobStartRequest) (*JobGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedJobberServer) Stop(context.Context, *JobStopRequest) (*JobGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedJobberServer) Get(context.Context, *JobGetRequest) (*JobGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJobberServer) List(context.Context, *JobListRequest) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJobberServer) Logs(*JobLogsRequest, Jobber_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedJobberServer) mustEmbedUnimplementedJobberServer() {}

// UnsafeJobberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobberServer will
// result in compilation errors.
type UnsafeJobberServer interface {
	mustEmbedUnimplementedJobberServer()
}

func RegisterJobberServer(s grpc.ServiceRegistrar, srv JobberServer) {
	s.RegisterService(&Jobber_ServiceDesc, srv)
}

func _Jobber_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobberServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobber/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobberServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobber_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobberServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobber/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobberServer).Stop(ctx, req.(*JobStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobber_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobberServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobber/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobberServer).Get(ctx, req.(*JobGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobber_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobberServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobber/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobberServer).List(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jobber_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobberServer).Logs(m, &jobberLogsServer{stream})
}

type Jobber_LogsServer interface {
	Send(*JobLogsResponse) error
	grpc.ServerStream
}

type jobberLogsServer struct {
	grpc.ServerStream
}

func (x *jobberLogsServer) Send(m *JobLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Jobber_ServiceDesc is the grpc.ServiceDesc for Jobber service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobber_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Jobber",
	HandlerType: (*JobberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Jobber_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Jobber_Stop_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Jobber_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Jobber_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Jobber_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/job.proto",
}
